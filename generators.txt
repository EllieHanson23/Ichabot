Supplier s = null;
s = () -> 5;
s.get()
Stream.generate(s)
Stream.generate(s).sum()
Stream.generate(s).forEach(x -> { System.out.println(x); })
Stream.generate(s).limit(5).forEach(x -> { System.out.println(x); })
Stream.generate(s).limit(5)
s
Stream.generate(() -> 5).limit(5)
Stream.generate(() -> 5).limit(5).collect(Collector.toList())
Stream.generate(() -> 5).limit(5).collect(Collectors.toList())
Stream.range(1,5)
IntStream.range(1,5)
IntStream.range(1,5).limit(3).collect(Collectors.toList())
IntStream.range(1,5).limit(3).sum()
IntStream.range(1,5).sum()
class Counter extends Supplier<Integer>() {
    int c = 1;
    public int get() { 
      return c++; 
    }
}
class Counter extends Supplier<Integer> {
    int c = 1;
    public int get() { 
      return c++; 
    }
}
class Counter implements Supplier<Integer> {
    int c = 1;
    public int get() { 
      return c++; 
    }
}
class Counter implements Supplier<Integer> {
    int c = 1;
    public Integer get() { 
      return c++; 
    }
}
Stream.generate(new Counter()).limit(5).forEach(System.out::println)
Stream.generate(new Counter()).limit(50).forEach(System.out::println)
class Counter implements Supplier<Integer> {
    int c = 1;
    public Integer get() { 
      return c++; 
    }
}
class Counter implements Supplier<Integer> {
    int c = 1;
    public Integer get() {  if(c>10) return null; 
      return c++; 
    }
}
Stream.generate(new Counter()).limit(5).forEach(System.out::println)
Stream.generate(new Counter()).limit(15).forEach(System.out::println)
Stream.generate(new Counter()).takeWhile(x -> x != null).forEach(System.out::println)
class Counter implements Supplier<Integer> {
    int c = 1;   long startTime = -1;
    public Integer get() {  if(startTime == -1) startTime = System.currentTimeMillis(); if(System.currentTimeMillis()-startTime > 3000) return null; 
      return c++; 
    }
}
Stream.generate(new Counter()).takeWhile(x -> x != null).forEach(System.out::println)
/save -history generators.txt
